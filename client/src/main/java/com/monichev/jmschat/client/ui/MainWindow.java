package com.monichev.jmschat.client.ui;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.jms.JMSException;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.monichev.jmschat.entity.MessageEntity;
import com.monichev.jmschat.jms.ClientBroker;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component
public class MainWindow extends JFrame {

    private static final Logger LOGGER = LoggerFactory.getLogger(MainWindow.class);
    private JTextArea textArea1;
    private JPanel rootPanel;
    private JPanel chatPanel;
    private JPanel loginPanel;
    private JTextField textField1;
    private JButton sendButton;
    private JTextField nameTextField;
    private Login login;
    private ClientBroker broker;

    public MainWindow() {
        $$$setupUI$$$();
        setTitle("Client");
        setContentPane($$$getRootComponent$$$());
        setSize(400, 400);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setAlwaysOnTop(true);
        setVisible(true);
        sendButton.addActionListener(e -> sendMessage());
        textField1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (e.getKeyChar() == '\n') {
                    sendMessage();
                    return;
                }
                super.keyTyped(e);
            }
        });

        textField1.requestFocus();
    }

    public void receiveMessage(String message) {
        textArea1.append("Server: " + message + "\n");
        textArea1.setCaretPosition(textArea1.getDocument().getLength());
    }

    private void sendMessage() {
        String text = textField1.getText();
        textField1.setText("");
        textArea1.append("Client: " + text + "\n");
        textArea1.setCaretPosition(textArea1.getDocument().getLength());
        try {
            broker.sendMessage(new MessageEntity(nameTextField.getText(), "server", text));
        } catch (JMSException e) {
            LOGGER.error("Can't send message", e);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new CardLayout(0, 0));
        loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        rootPanel.add(loginPanel, "login");
        loginPanel.add(login.$$$getRootComponent$$$(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        chatPanel = new JPanel();
        chatPanel.setLayout(new GridLayoutManager(3, 3, new Insets(10, 10, 10, 10), -1, -1));
        rootPanel.add(chatPanel, "chat");
        final JScrollPane scrollPane1 = new JScrollPane();
        chatPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textArea1 = new JTextArea();
        textArea1.setEditable(false);
        scrollPane1.setViewportView(textArea1);
        nameTextField = new JTextField();
        nameTextField.setEditable(false);
        nameTextField.setText("Server");
        chatPanel.add(nameTextField,
                new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Name");
        chatPanel.add(label1,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Message");
        chatPanel.add(label2,
                new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        chatPanel.add(textField1,
                new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Send");
        chatPanel.add(sendButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
        login = new Login(this::onLogin);
    }

    private void onLogin(String login) {
        nameTextField.setText(login);
        try {
            broker = new ClientBroker(login, "tcp://localhost:61616", message -> receiveMessage(message.getMessage()), message -> System.out.println(message));
            ((CardLayout) rootPanel.getLayout()).show(rootPanel, "chat");
        } catch (Exception e) {
            LOGGER.error("Can't run JMS ClientBroker", e);
            JOptionPane.showMessageDialog(this, "Can't run JMS ClientBroker\nError: " + e.getLocalizedMessage());
        }
    }
}
